/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2023-08-23T23:00:01Z
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DomainPeriodVulnerability {
    /// List of products affected by vulnerability, specifying product and vendor
    #[serde(rename = "affected_products", skip_serializing_if = "Option::is_none")]
    pub affected_products: Option<Vec<crate::models::DomainPeriodVulnerabilityAffectedProduct>>,
    /// Vulnerability community identifiers, which is usually populated for the most popular vulnerabilities
    #[serde(
        rename = "community_identifiers",
        skip_serializing_if = "Option::is_none"
    )]
    pub community_identifiers: Option<Vec<String>>,
    /// CVE ID number with four or more digits in the sequence number portion of the ID, examples: CVE-1999-0067, CVE-2014-12345, CVE-2016-7654321
    #[serde(rename = "cve")]
    pub cve: String,
    /// Vulnerability severity score, according to Common Vulnerability Scoring System V2
    #[serde(rename = "cvss_v2_base", skip_serializing_if = "Option::is_none")]
    pub cvss_v2_base: Option<String>,
    /// Vulnerability severity score, according to Common Vulnerability Scoring System V3
    #[serde(rename = "cvss_v3_base", skip_serializing_if = "Option::is_none")]
    pub cvss_v3_base: Option<String>,
    /// Text description of the vulnerability
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Exploit status of vulnerability, one of: unproven, available, easilyaccessible, activelyused
    #[serde(rename = "exploit_status", skip_serializing_if = "Option::is_none")]
    pub exploit_status: Option<String>,
    /// legacy field, not populated
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Date when the vulnerability was published
    #[serde(rename = "publish_date", skip_serializing_if = "Option::is_none")]
    pub publish_date: Option<String>,
    /// Threat actors that exploits vulnerability
    #[serde(rename = "related_actors", skip_serializing_if = "Option::is_none")]
    pub related_actors: Option<Vec<crate::models::DomainPeriodVulnerabilityActor>>,
    /// Related finished Intelligence Reports to vulnerability, which usually describes the exploitation or attacks using those
    #[serde(rename = "related_reports", skip_serializing_if = "Option::is_none")]
    pub related_reports: Option<Vec<crate::models::DomainPeriodVulnerabilityReport>>,
    /// Malware Families (threats) that are known to be related to the vulnerability
    #[serde(rename = "related_threats", skip_serializing_if = "Option::is_none")]
    pub related_threats: Option<Vec<crate::models::DomainPeriodVulnerabilityRelatedThreat>>,
    /// Severity of the vulnerability, can be empty or one of: LOW, MEDIUM, HIGH, CRITICAL
    #[serde(rename = "severity", skip_serializing_if = "Option::is_none")]
    pub severity: Option<String>,
    /// Date when the vulnerability was last time updated in the CrowdStrike's database
    #[serde(rename = "updated_timestamp", skip_serializing_if = "Option::is_none")]
    pub updated_timestamp: Option<String>,
}

impl DomainPeriodVulnerability {
    pub fn new(cve: String) -> DomainPeriodVulnerability {
        DomainPeriodVulnerability {
            affected_products: None,
            community_identifiers: None,
            cve,
            cvss_v2_base: None,
            cvss_v3_base: None,
            description: None,
            exploit_status: None,
            name: None,
            publish_date: None,
            related_actors: None,
            related_reports: None,
            related_threats: None,
            severity: None,
            updated_timestamp: None,
        }
    }
}
