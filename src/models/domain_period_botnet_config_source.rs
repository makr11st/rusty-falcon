/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2023-08-23T23:00:01Z
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DomainPeriodBotnetConfigSource {
    /// Populated for action botnets. List of action key value pairs, defined as the action and its type
    #[serde(rename = "actions")]
    pub actions: Vec<crate::models::DomainPeriodKeyValuePair>,
    /// Populated for spam botnets. The body of the spam template. If this contains replaceable variables, keep the variable names in the template as they appear in the raw config
    #[serde(rename = "body")]
    pub body: String,
    /// The botnet's name
    #[serde(rename = "botnet")]
    pub botnet: String,
    /// The type of botnet: `action`, `inject`, or `spam`
    #[serde(rename = "config_type")]
    pub config_type: String,
    /// Populated for inject botnets. List of inject targets and their data
    #[serde(rename = "injects")]
    pub injects: Vec<crate::models::DomainPeriodBotnetInject>,
    /// Optional sub-botnet differentiator
    #[serde(rename = "sub_botnet")]
    pub sub_botnet: String,
    /// Populated for spam botnets. The subject of the spam template. If this contains replaceable variables, keep the variable names in the template as they appear in the raw config
    #[serde(rename = "subject")]
    pub subject: String,
    /// Populated for spam botnets. List of key value pairs for any replaceable variables in the spam template
    #[serde(rename = "variables")]
    pub variables: Vec<crate::models::DomainPeriodKeyValuePair>,
}

impl DomainPeriodBotnetConfigSource {
    pub fn new(
        actions: Vec<crate::models::DomainPeriodKeyValuePair>,
        body: String,
        botnet: String,
        config_type: String,
        injects: Vec<crate::models::DomainPeriodBotnetInject>,
        sub_botnet: String,
        subject: String,
        variables: Vec<crate::models::DomainPeriodKeyValuePair>,
    ) -> DomainPeriodBotnetConfigSource {
        DomainPeriodBotnetConfigSource {
            actions,
            body,
            botnet,
            config_type,
            injects,
            sub_botnet,
            subject,
            variables,
        }
    }
}
