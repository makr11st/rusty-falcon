/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2023-08-23T23:00:01Z
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DomainPeriodECrimeKillChain {
    /// Free form text describing attribution of the ecrime actor
    #[serde(rename = "attribution", skip_serializing_if = "Option::is_none")]
    pub attribution: Option<String>,
    /// Free form text describing actor's crimes
    #[serde(rename = "crimes", skip_serializing_if = "Option::is_none")]
    pub crimes: Option<String>,
    /// Free form text describing ecrime actor's customers and affiliates
    #[serde(rename = "customers", skip_serializing_if = "Option::is_none")]
    pub customers: Option<String>,
    /// Comma separated values of vulnerabilities by CVE codes that are exploited by actor
    #[serde(rename = "exploitation", skip_serializing_if = "Option::is_none")]
    pub exploitation: Option<String>,
    /// Free form text describing ecrime actor's marketing campaigns and advertisement
    #[serde(rename = "marketing", skip_serializing_if = "Option::is_none")]
    pub marketing: Option<String>,
    /// Legacy field, not used and empty
    #[serde(rename = "monetization", skip_serializing_if = "Option::is_none")]
    pub monetization: Option<String>,
    /// Rich text version of the attribution field
    #[serde(
        rename = "rich_text_attribution",
        skip_serializing_if = "Option::is_none"
    )]
    pub rich_text_attribution: Option<String>,
    /// Rich text version of the crimes field
    #[serde(rename = "rich_text_crimes", skip_serializing_if = "Option::is_none")]
    pub rich_text_crimes: Option<String>,
    /// Rich text version of the customers field
    #[serde(
        rename = "rich_text_customers",
        skip_serializing_if = "Option::is_none"
    )]
    pub rich_text_customers: Option<String>,
    /// Rich text version of the exploitation field
    #[serde(
        rename = "rich_text_exploitation",
        skip_serializing_if = "Option::is_none"
    )]
    pub rich_text_exploitation: Option<String>,
    /// Rich text version of the marketing field
    #[serde(
        rename = "rich_text_marketing",
        skip_serializing_if = "Option::is_none"
    )]
    pub rich_text_marketing: Option<String>,
    /// Legacy field, not used and empty
    #[serde(
        rename = "rich_text_monetization",
        skip_serializing_if = "Option::is_none"
    )]
    pub rich_text_monetization: Option<String>,
    /// Rich text version of the services_offered field
    #[serde(
        rename = "rich_text_services_offered",
        skip_serializing_if = "Option::is_none"
    )]
    pub rich_text_services_offered: Option<String>,
    /// Rich text version of the services_used field
    #[serde(
        rename = "rich_text_services_used",
        skip_serializing_if = "Option::is_none"
    )]
    pub rich_text_services_used: Option<String>,
    /// Rich text version of the technical_tradecraft field
    #[serde(
        rename = "rich_text_technical_tradecraft",
        skip_serializing_if = "Option::is_none"
    )]
    pub rich_text_technical_tradecraft: Option<String>,
    /// Rich text version of the victims field
    #[serde(rename = "rich_text_victims", skip_serializing_if = "Option::is_none")]
    pub rich_text_victims: Option<String>,
    /// Free form text describing ecrime actor's services offered and monetized
    #[serde(rename = "services_offered", skip_serializing_if = "Option::is_none")]
    pub services_offered: Option<String>,
    /// Free form text describing ecrime actor's used services provided by other actors or groups
    #[serde(rename = "services_used", skip_serializing_if = "Option::is_none")]
    pub services_used: Option<String>,
    /// Free form text describing methods and descriptions of techniques used by actor
    #[serde(
        rename = "technical_tradecraft",
        skip_serializing_if = "Option::is_none"
    )]
    pub technical_tradecraft: Option<String>,
    /// Free form text describing victims or their characteristics of the ecrime actor
    #[serde(rename = "victims", skip_serializing_if = "Option::is_none")]
    pub victims: Option<String>,
}

impl DomainPeriodECrimeKillChain {
    pub fn new() -> DomainPeriodECrimeKillChain {
        DomainPeriodECrimeKillChain {
            attribution: None,
            crimes: None,
            customers: None,
            exploitation: None,
            marketing: None,
            monetization: None,
            rich_text_attribution: None,
            rich_text_crimes: None,
            rich_text_customers: None,
            rich_text_exploitation: None,
            rich_text_marketing: None,
            rich_text_monetization: None,
            rich_text_services_offered: None,
            rich_text_services_used: None,
            rich_text_technical_tradecraft: None,
            rich_text_victims: None,
            services_offered: None,
            services_used: None,
            technical_tradecraft: None,
            victims: None,
        }
    }
}
