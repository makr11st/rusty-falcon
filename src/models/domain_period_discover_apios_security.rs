/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2023-08-23T23:00:01Z
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DomainPeriodDiscoverApiosSecurity {
    /// The credential guard status of the host
    #[serde(
        rename = "credential_guard_status",
        skip_serializing_if = "Option::is_none"
    )]
    pub credential_guard_status: Option<bool>,
    /// The device guard status of the host
    #[serde(
        rename = "device_guard_status",
        skip_serializing_if = "Option::is_none"
    )]
    pub device_guard_status: Option<bool>,
    /// The iommu protection status of the host
    #[serde(
        rename = "iommu_protection_status",
        skip_serializing_if = "Option::is_none"
    )]
    pub iommu_protection_status: Option<String>,
    /// The kernel dma protection status of the host
    #[serde(
        rename = "kernel_dma_protection_status",
        skip_serializing_if = "Option::is_none"
    )]
    pub kernel_dma_protection_status: Option<bool>,
    /// The secure boot enabled status of the host
    #[serde(
        rename = "secure_boot_enabled_status",
        skip_serializing_if = "Option::is_none"
    )]
    pub secure_boot_enabled_status: Option<bool>,
    /// The secure boot requested status of the host
    #[serde(
        rename = "secure_boot_requested_status",
        skip_serializing_if = "Option::is_none"
    )]
    pub secure_boot_requested_status: Option<bool>,
    /// The secure memory overwrite requested status of the host
    #[serde(
        rename = "secure_memory_overwrite_requested_status",
        skip_serializing_if = "Option::is_none"
    )]
    pub secure_memory_overwrite_requested_status: Option<String>,
    /// The system guard status of the host
    #[serde(
        rename = "system_guard_status",
        skip_serializing_if = "Option::is_none"
    )]
    pub system_guard_status: Option<String>,
    /// The uefi memory protection status of the host
    #[serde(
        rename = "uefi_memory_protection_status",
        skip_serializing_if = "Option::is_none"
    )]
    pub uefi_memory_protection_status: Option<String>,
    /// The virtualization based security status of the host
    #[serde(
        rename = "virtualization_based_security_status",
        skip_serializing_if = "Option::is_none"
    )]
    pub virtualization_based_security_status: Option<bool>,
}

impl DomainPeriodDiscoverApiosSecurity {
    pub fn new() -> DomainPeriodDiscoverApiosSecurity {
        DomainPeriodDiscoverApiosSecurity {
            credential_guard_status: None,
            device_guard_status: None,
            iommu_protection_status: None,
            kernel_dma_protection_status: None,
            secure_boot_enabled_status: None,
            secure_boot_requested_status: None,
            secure_memory_overwrite_requested_status: None,
            system_guard_status: None,
            uefi_memory_protection_status: None,
            virtualization_based_security_status: None,
        }
    }
}
