/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2023-08-23T23:00:01Z
 *
 * Generated by: https://openapi-generator.tech
 */

/// DomainPeriodDiscoverApiApplicationHost : Represents information about an application's host'.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DomainPeriodDiscoverApiApplicationHost {
    /// The version of the Falcon sensor that's installed on the asset.
    #[serde(rename = "agent_version", skip_serializing_if = "Option::is_none")]
    pub agent_version: Option<String>,
    /// The agent ID of the Falcon sensor installed on the asset.
    #[serde(rename = "aid", skip_serializing_if = "Option::is_none")]
    pub aid: Option<String>,
    /// The name of the country where the asset is located.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// The last seen MAC address of the asset.
    #[serde(
        rename = "current_mac_address",
        skip_serializing_if = "Option::is_none"
    )]
    pub current_mac_address: Option<String>,
    /// The last seen network prefix of the asset.
    #[serde(
        rename = "current_network_prefix",
        skip_serializing_if = "Option::is_none"
    )]
    pub current_network_prefix: Option<String>,
    /// The external IPv4 address of the asset.
    #[serde(rename = "external_ip", skip_serializing_if = "Option::is_none")]
    pub external_ip: Option<String>,
    /// The host management groups the asset is part of.
    #[serde(rename = "groups", skip_serializing_if = "Option::is_none")]
    pub groups: Option<Vec<String>>,
    /// The asset's hostname.
    #[serde(rename = "hostname", skip_serializing_if = "Option::is_none")]
    pub hostname: Option<String>,
    /// The unique ID of the asset.
    #[serde(rename = "id")]
    pub id: String,
    /// Whether the asset is exposed to the internet (Yes or Unknown).
    #[serde(rename = "internet_exposure", skip_serializing_if = "Option::is_none")]
    pub internet_exposure: Option<String>,
    /// For Linux and Mac hosts: the major version, minor version, and patch version of the kernel for the asset. For Windows hosts: the build number of the asset.
    #[serde(rename = "kernel_version", skip_serializing_if = "Option::is_none")]
    pub kernel_version: Option<String>,
    /// The domain name the asset is currently joined to.
    #[serde(rename = "machine_domain", skip_serializing_if = "Option::is_none")]
    pub machine_domain: Option<String>,
    /// The OS version of the asset.
    #[serde(rename = "os_version", skip_serializing_if = "Option::is_none")]
    pub os_version: Option<String>,
    /// The organizational unit of the asset.
    #[serde(rename = "ou", skip_serializing_if = "Option::is_none")]
    pub ou: Option<String>,
    /// The platform name of the asset (Windows, Mac, Linux).
    #[serde(rename = "platform_name", skip_serializing_if = "Option::is_none")]
    pub platform_name: Option<String>,
    /// The product type of the asset (Workstation, Domain Controller, Server).
    #[serde(rename = "product_type_desc", skip_serializing_if = "Option::is_none")]
    pub product_type_desc: Option<String>,
    /// The site name of the domain the asset is joined to (applies only to Windows hosts).
    #[serde(rename = "site_name", skip_serializing_if = "Option::is_none")]
    pub site_name: Option<String>,
    /// The asset's system manufacturer.
    #[serde(
        rename = "system_manufacturer",
        skip_serializing_if = "Option::is_none"
    )]
    pub system_manufacturer: Option<String>,
    /// The sensor and cloud tags of the asset.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
}

impl DomainPeriodDiscoverApiApplicationHost {
    /// Represents information about an application's host'.
    pub fn new(id: String) -> DomainPeriodDiscoverApiApplicationHost {
        DomainPeriodDiscoverApiApplicationHost {
            agent_version: None,
            aid: None,
            country: None,
            current_mac_address: None,
            current_network_prefix: None,
            external_ip: None,
            groups: None,
            hostname: None,
            id,
            internet_exposure: None,
            kernel_version: None,
            machine_domain: None,
            os_version: None,
            ou: None,
            platform_name: None,
            product_type_desc: None,
            site_name: None,
            system_manufacturer: None,
            tags: None,
        }
    }
}
