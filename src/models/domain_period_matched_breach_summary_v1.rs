/*
 * CrowdStrike API Specification
 *
 * Use this API specification as a reference for the API endpoints you can use to interact with your Falcon environment. These endpoints support authentication via OAuth2 and interact with detections and network containment. For detailed usage guides and examples, see our [documentation inside the Falcon console](https://falcon.crowdstrike.com/support/documentation).     To use the APIs described below, combine the base URL with the path shown for each API endpoint. For commercial cloud customers, your base URL is `https://api.crowdstrike.com`.    Each API endpoint requires authorization via an OAuth2 token. Your first API request should retrieve an OAuth2 token using the `oauth2/token` endpoint, such as `https://api.crowdstrike.com/oauth2/token`. For subsequent requests, include the OAuth2 token in an HTTP authorization header. Tokens expire after 30 minutes, after which you should make a new token request to continue making API requests.
 *
 * The version of the OpenAPI document: 2023-08-23T23:00:01Z
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DomainPeriodMatchedBreachSummaryV1 {
    /// Community/colloquial exposed data event name.
    #[serde(rename = "community_name", skip_serializing_if = "Option::is_none")]
    pub community_name: Option<String>,
    /// The level of confidence regarding data veridicality. Options for likely authentic, confirmed authentic (default: unverified).
    #[serde(rename = "confidence_level", skip_serializing_if = "Option::is_none")]
    pub confidence_level: Option<String>,
    /// A list of statuses for the exposed data records contained in the notification. Possible values: 'newly_detected', 'previously_reported' and/or 'other'
    #[serde(
        rename = "credential_statuses",
        skip_serializing_if = "Option::is_none"
    )]
    pub credential_statuses: Option<Vec<String>>,
    #[serde(
        rename = "credentials_domains",
        skip_serializing_if = "Option::is_none"
    )]
    pub credentials_domains: Option<Vec<String>>,
    #[serde(rename = "credentials_ips", skip_serializing_if = "Option::is_none")]
    pub credentials_ips: Option<Vec<String>>,
    /// The description of the breach
    #[serde(rename = "description")]
    pub description: String,
    /// The date the exposed data event occurred.
    #[serde(rename = "event_date", skip_serializing_if = "Option::is_none")]
    pub event_date: Option<String>,
    /// CrowdStrike-generated unique exposed data event identifier.
    #[serde(rename = "event_id", skip_serializing_if = "Option::is_none")]
    pub event_id: Option<String>,
    /// The date when the data was leaked online
    #[serde(rename = "exposure_date", skip_serializing_if = "Option::is_none")]
    pub exposure_date: Option<String>,
    /// The set of fields which were breached: 'email', 'password', 'login_id', 'phone', etc.
    #[serde(rename = "fields")]
    pub fields: Vec<String>,
    /// Metadata regarding the file(s) where exposed data records where found.
    #[serde(rename = "files", skip_serializing_if = "Option::is_none")]
    pub files: Option<Vec<crate::models::DomainPeriodFileDetailsV1>>,
    #[serde(rename = "idp_send_date", skip_serializing_if = "Option::is_none")]
    pub idp_send_date: Option<String>,
    #[serde(rename = "idp_send_status", skip_serializing_if = "Option::is_none")]
    pub idp_send_status: Option<String>,
    /// (Boolean) If the notification was processed before the introduction of exposed data deduplication
    #[serde(rename = "is_retroactively_deduped")]
    pub is_retroactively_deduped: bool,
    /// The name of the breach
    #[serde(rename = "name")]
    pub name: String,
    /// Exposed Data Event Threat Actor/Group: Moniker(s) or real name(s) of the individual/group who unveiled confidential data.
    #[serde(rename = "obtained_by", skip_serializing_if = "Option::is_none")]
    pub obtained_by: Option<String>,
    /// Where the leak was found.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
}

impl DomainPeriodMatchedBreachSummaryV1 {
    pub fn new(
        description: String,
        fields: Vec<String>,
        is_retroactively_deduped: bool,
        name: String,
    ) -> DomainPeriodMatchedBreachSummaryV1 {
        DomainPeriodMatchedBreachSummaryV1 {
            community_name: None,
            confidence_level: None,
            credential_statuses: None,
            credentials_domains: None,
            credentials_ips: None,
            description,
            event_date: None,
            event_id: None,
            exposure_date: None,
            fields,
            files: None,
            idp_send_date: None,
            idp_send_status: None,
            is_retroactively_deduped,
            name,
            obtained_by: None,
            url: None,
        }
    }
}
